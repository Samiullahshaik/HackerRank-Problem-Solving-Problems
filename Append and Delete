import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'appendAndDelete' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. STRING t
     *  3. INTEGER k
     */

    public static String appendAndDelete(String s, String t, int k) {
    // Write your code here
          if (s.length() + t.length() <= k) {
        return "Yes";
    }
   
    int stringSmaller = Math.min(s.length(), t.length());
    int stringLarger = Math.max(s.length(), t.length());
   
    int sameString = 0;
    for (int i = stringSmaller; i >= 0; i--) {
        String substringS = s.substring(0, i);
        String substringT = t.substring(0, i);
        if (substringS.equals(substringT)) {
            sameString = i;
            break;
        }
    }
    
    int restOfStringBig = stringLarger - sameString;
    int restOfStringSmall = stringSmaller - sameString;
    
    if (restOfStringBig + restOfStringSmall > k) {
        return "No";
    
    } else if ((k - (restOfStringBig + restOfStringSmall)) % 2 == 0) {
        return "Yes";
    
    } 
    else {
        return "No";
    }
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        String t = bufferedReader.readLine();

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        String result = Result.appendAndDelete(s, t, k);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
