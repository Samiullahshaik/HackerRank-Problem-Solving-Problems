import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the flatlandSpaceStations function below.
    static int flatlandSpaceStations(int n, int[] c) {
        Arrays.sort(c);
        int max = Math.max(c[0], n - 1 - c[c.length - 1]);
        /*
        CASE 1. c = {2,4,...} & cities = {0,1,2,3...}, max would be c[0] = 2
        CASE 2. c = {...,3,4} & cities = {...,7,8,9}, max would be n - 1 - c[c.length -1] = 10 - 1 - 4 = 5 (distance from 4 to 9)
        CASE 3. c = {0,1,...9} and cities = {0,1,4....9}, max would be distance between two c[i] / 2
        */
        for(int i = 1; i < c.length; i++)
            max = Math.max(max, (c[i] - c[i - 1])/2);
        return max;

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        int[] c = new int[m];

        String[] cItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < m; i++) {
            int cItem = Integer.parseInt(cItems[i]);
            c[i] = cItem;
        }

        int result = flatlandSpaceStations(n, c);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
